// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { GetAllPhotoFoldersResponse, CreateAfolderData, CreateAfolderResponse, GetAllFilesInFoldersData, GetAllFilesInFoldersResponse, UploadFilesData, UploadFilesResponse, RenameAfolderData, RenameAfolderResponse, DeleteCaptionsInFolderData, DeleteCaptionsInFolderResponse, GetCaptionsFromFolderData, GetCaptionsFromFolderResponse, SetCaptionsInFolderData, SetCaptionsInFolderResponse, GetPislideServiceStatusResponse, ChangePislideServiceData, ChangePislideServiceResponse, GetAllSlideshowsResponse, SetActiveSlideshowData, SetActiveSlideshowResponse, GetSlideshowData, GetSlideshowResponse, CreateSlideshowData, CreateSlideshowResponse, UpdateSpecificSlideshowData, UpdateSpecificSlideshowResponse } from './types.gen';

export class PhotosService {
    /**
     * Get list of photo folders
     * Get list of folders that may contain photos
     * @returns FoldersOutputBody OK
     * @throws ApiError
     */
    public static getAllPhotoFolders(): CancelablePromise<GetAllPhotoFoldersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/photos',
            errors: {
                default: 'Error'
            }
        });
    }
    
    /**
     * Create a folder
     * Create a folder
     * @param data The data for the request.
     * @param data.foldername
     * @param data.requestBody
     * @returns FoldersOutputBody OK
     * @throws ApiError
     */
    public static createAFolder(data: CreateAfolderData): CancelablePromise<CreateAfolderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/photos',
            path: {
                foldername: data.foldername
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'Error'
            }
        });
    }
    
    /**
     * Get all files in a folder
     * Get list of all files in a folder
     * @param data The data for the request.
     * @param data.foldername
     * @returns FolderFilesOutputBody OK
     * @throws ApiError
     */
    public static getAllFilesInFolders(data: GetAllFilesInFoldersData): CancelablePromise<GetAllFilesInFoldersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/photos/{foldername}',
            path: {
                foldername: data.foldername
            },
            errors: {
                default: 'Error'
            }
        });
    }
    
    /**
     * Upload a file to a folder
     * @param data The data for the request.
     * @param data.foldername
     * @param data.formData
     * @returns FolderFilesOutputBody OK
     * @throws ApiError
     */
    public static uploadFiles(data: UploadFilesData): CancelablePromise<UploadFilesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/photos/{foldername}',
            path: {
                foldername: data.foldername
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                default: 'Error'
            }
        });
    }
    
    /**
     * Rename a folder
     * Rename a folder
     * @param data The data for the request.
     * @param data.foldername
     * @param data.requestBody
     * @returns FolderFilesOutputBody OK
     * @throws ApiError
     */
    public static renameAFolder(data: RenameAfolderData): CancelablePromise<RenameAfolderResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/photos/{foldername}',
            path: {
                foldername: data.foldername
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'Error'
            }
        });
    }
    
    /**
     * Delete captions in a folder
     * Delete specified captions from a folder
     * @param data The data for the request.
     * @param data.foldername
     * @param data.requestBody
     * @returns CaptionsOutputBody OK
     * @throws ApiError
     */
    public static deleteCaptionsInFolder(data: DeleteCaptionsInFolderData): CancelablePromise<DeleteCaptionsInFolderResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/photos/{foldername}/captions',
            path: {
                foldername: data.foldername
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'Error'
            }
        });
    }
    
    /**
     * Get all captions in a folder
     * Go through and find all valid captions files associated with images
     * @param data The data for the request.
     * @param data.foldername
     * @returns CaptionsOutputBody OK
     * @throws ApiError
     */
    public static getCaptionsFromFolder(data: GetCaptionsFromFolderData): CancelablePromise<GetCaptionsFromFolderResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/photos/{foldername}/captions',
            path: {
                foldername: data.foldername
            },
            errors: {
                default: 'Error'
            }
        });
    }
    
    /**
     * Set captions in a folder
     * Upsert captions into the folder
     * @param data The data for the request.
     * @param data.foldername
     * @param data.requestBody
     * @returns CaptionsOutputBody OK
     * @throws ApiError
     */
    public static setCaptionsInFolder(data: SetCaptionsInFolderData): CancelablePromise<SetCaptionsInFolderResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/photos/{foldername}/captions',
            path: {
                foldername: data.foldername
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'Error'
            }
        });
    }
    
}

export class PiSlideServiceService {
    /**
     * Get PiSlide service status
     * Show the current PiSlide service status as per systemctl
     * @returns PiSlideStatusOutputBody OK
     * @throws ApiError
     */
    public static getPislideServiceStatus(): CancelablePromise<GetPislideServiceStatusResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/pislide-service',
            errors: {
                default: 'Error'
            }
        });
    }
    
    /**
     * Start/Stop/Restart PiSlide service
     * Start/Stop/Restart the PiSlide service per systemctl
     * @param data The data for the request.
     * @param data.action
     * @returns PiSlideStatusOutputBody OK
     * @throws ApiError
     */
    public static changePislideService(data: ChangePislideServiceData): CancelablePromise<ChangePislideServiceResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/pislide-service',
            query: {
                action: data.action
            },
            errors: {
                default: 'Error'
            }
        });
    }
    
}

export class SlideshowsService {
    /**
     * Get all slideshows
     * Get the active slideshow and all slideshow settings
     * @returns SlideshowsOutputBody OK
     * @throws ApiError
     */
    public static getAllSlideshows(): CancelablePromise<GetAllSlideshowsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/slideshows',
            errors: {
                default: 'Error'
            }
        });
    }
    
    /**
     * Set active slideshow
     * Set the active slideshow
     * @param data The data for the request.
     * @param data.requestBody
     * @returns SlideshowsOutputBody OK
     * @throws ApiError
     */
    public static setActiveSlideshow(data: SetActiveSlideshowData): CancelablePromise<SetActiveSlideshowResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/slideshows',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'Error'
            }
        });
    }
    
    /**
     * Get specific slideshow
     * Get a specific slideshow's settings
     * @param data The data for the request.
     * @param data.foldername slideshow folder to get settings for
     * @returns SpecificSlideshowOutputBody OK
     * @throws ApiError
     */
    public static getSlideshow(data: GetSlideshowData): CancelablePromise<GetSlideshowResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/slideshows/{foldername}',
            path: {
                foldername: data.foldername
            },
            errors: {
                default: 'Error'
            }
        });
    }
    
    /**
     * Create a slideshow
     * Create a slideshow by setting all the required options.
     * @param data The data for the request.
     * @param data.foldername Folder the images reside in
     * @param data.requestBody
     * @returns SpecificSlideshowOutputBody OK
     * @throws ApiError
     */
    public static createSlideshow(data: CreateSlideshowData): CancelablePromise<CreateSlideshowResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/slideshows/{foldername}',
            path: {
                foldername: data.foldername
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'Error'
            }
        });
    }
    
    /**
     * Update an existing slideshow
     * Update a slideshow by setting all the required options.
     * @param data The data for the request.
     * @param data.foldername Folder the images reside in
     * @param data.requestBody
     * @returns SpecificSlideshowOutputBody OK
     * @throws ApiError
     */
    public static updateSpecificSlideshow(data: UpdateSpecificSlideshowData): CancelablePromise<UpdateSpecificSlideshowResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/slideshows/{foldername}',
            path: {
                foldername: data.foldername
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'Error'
            }
        });
    }
    
}