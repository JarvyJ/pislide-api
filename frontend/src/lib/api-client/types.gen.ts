// This file is auto-generated by @hey-api/openapi-ts

export type BaseSlideShowOutput = {
    display: 'filename' | 'caption' | 'none';
    /**
     * Slide duration in seconds
     */
    duration: number;
    sort: 'filename' | 'natural' | 'random';
    /**
     * Duration of fade transition in seconds
     */
    transition_duration: number;
};

export type display = 'filename' | 'caption' | 'none';

export type sort = 'filename' | 'natural' | 'random';

export type CaptionsDeleteInputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * List of captions to be deleted
     */
    captions_to_delete: Array<(string)>;
};

export type CaptionsOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * Map of captions associated with files
     */
    captions: {
        [key: string]: (string);
    };
};

export type CaptionsSetInputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * Map of captions associated with files. Will upsert and not delete existing if not specified
     */
    captions: {
        [key: string]: (string);
    };
};

export type ErrorDetail = {
    /**
     * Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'
     */
    location?: string;
    /**
     * Error message text
     */
    message?: string;
    /**
     * The value at the given location
     */
    value?: unknown;
};

export type ErrorModel = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     */
    detail?: string;
    /**
     * Optional list of individual error details
     */
    errors?: Array<ErrorDetail>;
    /**
     * A URI reference that identifies the specific occurrence of the problem.
     */
    instance?: string;
    /**
     * HTTP status code
     */
    status?: number;
    /**
     * A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
     */
    title?: string;
    /**
     * A URI reference to human-readable documentation for the error.
     */
    type?: string;
};

export type FolderFilesOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * List of all the files (recursively) in the folder
     */
    files: Array<(string)>;
};

export type FolderRenameInputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    new_foldername: string;
};

export type FoldersOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * List of all the folders that may contain photos
     */
    folders: Array<(string)>;
};

export type PiSlideStatusOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * The command from the corresponding systemctl call
     */
    command_output: string;
    /**
     * The status code of the response
     */
    status_code: number;
};

export type SlideshowsInputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * The active slideshow
     */
    active_slideshow: string;
};

export type SlideshowsOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * The active slideshow
     */
    active_slideshow: string;
    slideshows: {
        [key: string]: BaseSlideShowOutput;
    };
};

export type SpecificSlideshowInputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    display?: 'filename' | 'caption' | 'none';
    /**
     * Slideshow delay in seconds
     */
    duration: number;
    sort?: 'filename' | 'natural' | 'random';
    /**
     * Duration of fade transition in seconds
     */
    transition_duration?: number;
};

export type SpecificSlideshowOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * Actual rayimg command that will run the slideshow
     */
    command: string;
    display: 'filename' | 'caption' | 'none';
    /**
     * Slide duration in seconds
     */
    duration: number;
    sort: 'filename' | 'natural' | 'random';
    /**
     * Duration of fade transition in seconds
     */
    transition_duration: number;
};

export type GetAllPhotoFoldersResponse = FoldersOutputBody;

export type CreateAfolderData = {
    foldername: string;
    requestBody: FolderRenameInputBody;
};

export type CreateAfolderResponse = FoldersOutputBody;

export type GetAllFilesInFoldersData = {
    foldername: string;
};

export type GetAllFilesInFoldersResponse = FolderFilesOutputBody;

export type UploadFilesData = {
    foldername: string;
    formData: {
        /**
         * filename of the file being uploaded
         */
        filename?: (Blob | File);
        /**
         * general purpose name for multipart form value
         */
        name?: string;
    };
};

export type UploadFilesResponse = FolderFilesOutputBody;

export type RenameAfolderData = {
    foldername: string;
    requestBody: FolderRenameInputBody;
};

export type RenameAfolderResponse = FolderFilesOutputBody;

export type DeleteCaptionsInFolderData = {
    foldername: string;
    requestBody: CaptionsDeleteInputBody;
};

export type DeleteCaptionsInFolderResponse = CaptionsOutputBody;

export type GetCaptionsFromFolderData = {
    foldername: string;
};

export type GetCaptionsFromFolderResponse = CaptionsOutputBody;

export type SetCaptionsInFolderData = {
    foldername: string;
    requestBody: CaptionsSetInputBody;
};

export type SetCaptionsInFolderResponse = CaptionsOutputBody;

export type GetPislideServiceStatusResponse = PiSlideStatusOutputBody;

export type ChangePislideServiceData = {
    action: 'start' | 'stop' | 'restart';
};

export type ChangePislideServiceResponse = PiSlideStatusOutputBody;

export type GetAllSlideshowsResponse = SlideshowsOutputBody;

export type SetActiveSlideshowData = {
    requestBody: SlideshowsInputBody;
};

export type SetActiveSlideshowResponse = SlideshowsOutputBody;

export type GetSlideshowData = {
    /**
     * slideshow folder to get settings for
     */
    foldername: string;
};

export type GetSlideshowResponse = SpecificSlideshowOutputBody;

export type CreateSlideshowData = {
    /**
     * Folder the images reside in
     */
    foldername: string;
    requestBody: SpecificSlideshowInputBody;
};

export type CreateSlideshowResponse = SpecificSlideshowOutputBody;

export type UpdateSpecificSlideshowData = {
    /**
     * Folder the images reside in
     */
    foldername: string;
    requestBody: SpecificSlideshowInputBody;
};

export type UpdateSpecificSlideshowResponse = SpecificSlideshowOutputBody;

export type $OpenApiTs = {
    '/api/v1/photos': {
        get: {
            res: {
                /**
                 * OK
                 */
                200: FoldersOutputBody;
                /**
                 * Error
                 */
                default: ErrorModel;
            };
        };
        post: {
            req: CreateAfolderData;
            res: {
                /**
                 * OK
                 */
                200: FoldersOutputBody;
                /**
                 * Error
                 */
                default: ErrorModel;
            };
        };
    };
    '/api/v1/photos/{foldername}': {
        get: {
            req: GetAllFilesInFoldersData;
            res: {
                /**
                 * OK
                 */
                200: FolderFilesOutputBody;
                /**
                 * Error
                 */
                default: ErrorModel;
            };
        };
        post: {
            req: UploadFilesData;
            res: {
                /**
                 * OK
                 */
                200: FolderFilesOutputBody;
                /**
                 * Error
                 */
                default: ErrorModel;
            };
        };
        put: {
            req: RenameAfolderData;
            res: {
                /**
                 * OK
                 */
                200: FolderFilesOutputBody;
                /**
                 * Error
                 */
                default: ErrorModel;
            };
        };
    };
    '/api/v1/photos/{foldername}/captions': {
        delete: {
            req: DeleteCaptionsInFolderData;
            res: {
                /**
                 * OK
                 */
                200: CaptionsOutputBody;
                /**
                 * Error
                 */
                default: ErrorModel;
            };
        };
        get: {
            req: GetCaptionsFromFolderData;
            res: {
                /**
                 * OK
                 */
                200: CaptionsOutputBody;
                /**
                 * Error
                 */
                default: ErrorModel;
            };
        };
        put: {
            req: SetCaptionsInFolderData;
            res: {
                /**
                 * OK
                 */
                200: CaptionsOutputBody;
                /**
                 * Error
                 */
                default: ErrorModel;
            };
        };
    };
    '/api/v1/pislide-service': {
        get: {
            res: {
                /**
                 * OK
                 */
                200: PiSlideStatusOutputBody;
                /**
                 * Error
                 */
                default: ErrorModel;
            };
        };
        put: {
            req: ChangePislideServiceData;
            res: {
                /**
                 * OK
                 */
                200: PiSlideStatusOutputBody;
                /**
                 * Error
                 */
                default: ErrorModel;
            };
        };
    };
    '/api/v1/slideshows': {
        get: {
            res: {
                /**
                 * OK
                 */
                200: SlideshowsOutputBody;
                /**
                 * Error
                 */
                default: ErrorModel;
            };
        };
        put: {
            req: SetActiveSlideshowData;
            res: {
                /**
                 * OK
                 */
                200: SlideshowsOutputBody;
                /**
                 * Error
                 */
                default: ErrorModel;
            };
        };
    };
    '/api/v1/slideshows/{foldername}': {
        get: {
            req: GetSlideshowData;
            res: {
                /**
                 * OK
                 */
                200: SpecificSlideshowOutputBody;
                /**
                 * Error
                 */
                default: ErrorModel;
            };
        };
        post: {
            req: CreateSlideshowData;
            res: {
                /**
                 * OK
                 */
                200: SpecificSlideshowOutputBody;
                /**
                 * Error
                 */
                default: ErrorModel;
            };
        };
        put: {
            req: UpdateSpecificSlideshowData;
            res: {
                /**
                 * OK
                 */
                200: SpecificSlideshowOutputBody;
                /**
                 * Error
                 */
                default: ErrorModel;
            };
        };
    };
};